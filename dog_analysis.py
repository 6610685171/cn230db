import requests
import sqlite3

# 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å TheDogAPI
url = 'https://api.thedogapi.com/v1/breeds'
response = requests.get(url)
data = response.json()

# 2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQLite
conn = sqlite3.connect('dogs.db')
cursor = conn.cursor()

# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á breeds
cursor.execute('''
CREATE TABLE IF NOT EXISTS breeds (
    breed_id INTEGER PRIMARY KEY AUTOINCREMENT,
    breed_name TEXT,
    breed_group TEXT,
    life_expectancy INTEGER,
    origin TEXT,
    weight_range TEXT,
    height_range TEXT,
    temperament TEXT
)
''')

# 4. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
cursor.execute("DELETE FROM breeds")
for breed in data:
    breed_name = breed.get('name', '')
    breed_group = breed.get('breed_group', '')
    life_expectancy = None
    if 'life_span' in breed and breed['life_span']:
        try:
            life_expectancy = int(breed['life_span'].split(' ')[0])
        except:
            pass
    origin = breed.get('origin', '')
    weight_range = breed.get('weight', {}).get('imperial', '')
    height_range = breed.get('height', {}).get('imperial', '')
    temperament = breed.get('temperament', '')

    cursor.execute('''
        INSERT INTO breeds (breed_name, breed_group, life_expectancy, origin,
                            weight_range, height_range, temperament)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (breed_name, breed_group, life_expectancy, origin, weight_range, height_range, temperament))

conn.commit()

# -----------------------------------------
# 5. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -----------------------------------------
print("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏à‡∏≤‡∏Å TheDogAPI")

# ------------------------------------------------------
# üî∏ ‡∏´‡∏°‡∏ß‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (Weight Analysis)
# ------------------------------------------------------
print("\nüî∏ ‡∏´‡∏°‡∏ß‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (Weight Analysis)")

# 5.1 ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
print("\nüê∂ ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
cursor.execute('''
SELECT breed_name, weight_range,
    (CAST(substr(weight_range, 1, instr(weight_range, '-') - 1) AS FLOAT) +
     CAST(substr(weight_range, instr(weight_range, '-') + 1) AS FLOAT)) / 2 AS avg_weight
FROM breeds
WHERE weight_range LIKE '%-%'
GROUP BY breed_name
ORDER BY avg_weight DESC
LIMIT 5;
''')
for row in cursor.fetchall():
    print(f"- {row[0]}: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {row[2]:.1f} ‡∏õ‡∏≠‡∏ô‡∏î‡πå")

# 5.2 ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
print("\nüê∂ ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
cursor.execute('''
SELECT breed_name, weight_range,
    (CAST(substr(weight_range, 1, instr(weight_range, '-') - 1) AS FLOAT) +
     CAST(substr(weight_range, instr(weight_range, '-') + 1) AS FLOAT)) / 2 AS avg_weight
FROM breeds
WHERE weight_range LIKE '%-%'
GROUP BY breed_name
ORDER BY avg_weight ASC
LIMIT 5;
''')
for row in cursor.fetchall():
    print(f"- {row[0]}: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {row[2]:.1f} ‡∏õ‡∏≠‡∏ô‡∏î‡πå")

# 5.3 ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
print("\nüìä ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (Small ‚Üí Medium ‚Üí Large):")
cursor.execute('''
SELECT breed_name, weight_range,
    CASE
        WHEN ((CAST(substr(weight_range, 1, instr(weight_range, '-') - 1) AS FLOAT) +
               CAST(substr(weight_range, instr(weight_range, '-') + 1) AS FLOAT)) / 2) < 20 THEN '‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å (Small)'
        WHEN ((CAST(substr(weight_range, 1, instr(weight_range, '-') - 1) AS FLOAT) +
               CAST(substr(weight_range, instr(weight_range, '-') + 1) AS FLOAT)) / 2) < 50 THEN '‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á (Medium)'
        ELSE '‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (Large)'
    END AS size_category
FROM breeds
WHERE weight_range LIKE '%-%'
GROUP BY breed_name
ORDER BY
    CASE
        WHEN ((CAST(substr(weight_range, 1, instr(weight_range, '-') - 1) AS FLOAT) +
               CAST(substr(weight_range, instr(weight_range, '-') + 1) AS FLOAT)) / 2) < 20 THEN 1
        WHEN ((CAST(substr(weight_range, 1, instr(weight_range, '-') - 1) AS FLOAT) +
               CAST(substr(weight_range, instr(weight_range, '-') + 1) AS FLOAT)) / 2) < 50 THEN 2
        ELSE 3
    END, breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]}: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° {row[2]}")

# ------------------------------------------------------
# üî∏ ‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ (Life Expectancy)
# ------------------------------------------------------
print("\nüî∏ ‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏±‡∏¢ (Life Expectancy)")

# 5.4 ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
print("\nüìâ ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î:")
cursor.execute('''
SELECT breed_name, life_expectancy
FROM breeds
WHERE life_expectancy IS NOT NULL
ORDER BY life_expectancy
LIMIT 5;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} : ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {row[1]:.1f} ‡∏õ‡∏µ")

# 5.5 ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
print("\n‚è≥ ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:")
cursor.execute('''
SELECT breed_name, life_expectancy
FROM breeds
WHERE life_expectancy IS NOT NULL
ORDER BY life_expectancy DESC
LIMIT 5;
''')
for row in cursor.fetchall():
    print(f"- {row[0] or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} : ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {row[1]:.1f} ‡∏õ‡∏µ")

# 5.6 ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 12 ‡∏õ‡∏µ
print("\nüìà ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 12 ‡∏õ‡∏µ:")
cursor.execute('''
SELECT breed_name, life_expectancy
FROM breeds
WHERE life_expectancy > 12
ORDER BY life_expectancy DESC;
''')
for row in cursor.fetchall():
    print(f"- {row[0]}: ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {row[1]} ‡∏õ‡∏µ")

# ------------------------------------------------------
# üî∏ ‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏¥‡∏™‡∏±‡∏¢ (Temperament-based Analysis)
# ------------------------------------------------------
print("\nüî∏ ‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏¥‡∏™‡∏±‡∏¢ (Temperament-based Analysis)")

# 5.7 ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢
print("\n1Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢:")
cursor.execute('''
    SELECT breed_name, temperament
    FROM breeds
    WHERE temperament LIKE '%Intelligent%' OR temperament LIKE '%Alert%' OR temperament LIKE '%Responsive%'
    ORDER BY breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} ‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {row[1]}")
# print("\n1Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏î‡∏µ:")
# for dog in cursor.fetchall():
#     print(f"üê∂ {dog[0]}")


# 5.8 ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á
print("\n2Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á:")
cursor.execute('''
    SELECT breed_name, temperament
    FROM breeds
    WHERE temperament LIKE '%Energetic%' OR temperament LIKE '%Active%' OR temperament LIKE '%High-spirited%'
    ORDER BY breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} ‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {row[1]}")

# 5.9 ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î
print("\n3Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î:")
cursor.execute('''
    SELECT breed_name, weight_range, temperament
    FROM breeds
    WHERE (temperament LIKE '%Calm%' OR temperament LIKE '%Quiet%' OR temperament LIKE '%Docile%')
    AND (
        CASE
            WHEN INSTR(weight_range, '-') > 0
            THEN CAST(SUBSTR(weight_range, 1, INSTR(weight_range, '-') - 1) AS INT)
            ELSE NULL
        END
    ) < 20
    ORDER BY breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å {row[1]} ‡∏õ‡∏≠‡∏ô‡∏î‡πå ‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {row[2]}")

# 5.10 ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
print("\n4Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß:")
cursor.execute('''
    SELECT breed_name, temperament
    FROM breeds
    WHERE temperament LIKE '%Friendly%' OR temperament LIKE '%Gentle%' OR temperament LIKE '%Affectionate%' OR temperament LIKE '%Loving%'
    ORDER BY breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} ‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {row[1]}")

# 5.11 ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å
print("\n5Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å:")
cursor.execute('''
    SELECT breed_name, temperament
    FROM breeds
    WHERE temperament LIKE '%Easygoing%' OR temperament LIKE '%Adaptable%' OR temperament LIKE '%Lazy%'
    ORDER BY breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} ‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {row[1]}")

# 5.12 ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
print("\n6Ô∏è‚É£ ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô:")
cursor.execute('''
    SELECT breed_name, temperament
    FROM breeds
    WHERE temperament LIKE '%Playful%' OR temperament LIKE '%Sociable%' OR temperament LIKE '%Extroverted%'
    ORDER BY breed_name;
''')
for row in cursor.fetchall():
    print(f"- {row[0]} ‡∏≠‡∏∏‡∏õ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {row[1]}")

# 6. ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn.close()